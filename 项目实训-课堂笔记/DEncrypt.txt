  public static class DEncrypt
        {


            #region 使用 缺省密钥字符串 加密/解密string

            /// <summary>
            /// 使用缺省密钥字符串加密string
            /// </summary>
            /// <param name="original">明文</param>
            /// <returns>密文</returns>
            public static string Encrypt(this string original)
            {
                return Encrypt(original, "YONGJIASOFT");
            }
            /// <summary>
            /// 使用缺省密钥字符串解密string
            /// </summary>
            /// <param name="original">密文</param>
            /// <returns>明文</returns>
            public static string Decrypt(this string original)
            {
                return Decrypt(original, "YONGJIASOFT", System.Text.Encoding.Default);
            }

            #endregion

            #region 使用 给定密钥字符串 加密/解密string
            /// <summary>
            /// 使用给定密钥字符串加密string
            /// </summary>
            /// <param name="original">原始文字</param>
            /// <param name="key">密钥</param>
            /// <param name="encoding">字符编码方案</param>
            /// <returns>密文</returns>
            public static string Encrypt(this string original, string key)
            {
                byte[] buff = System.Text.Encoding.Default.GetBytes(original);
                byte[] kb = System.Text.Encoding.Default.GetBytes(key);
                return Convert.ToBase64String(Encrypt(buff, kb));
            }
            /// <summary>
            /// 使用给定密钥字符串解密string
            /// </summary>
            /// <param name="original">密文</param>
            /// <param name="key">密钥</param>
            /// <returns>明文</returns>
            public static string Decrypt(this string original, string key)
            {
                return Decrypt(original, key, System.Text.Encoding.Default);
            }

            /// <summary>
            /// 使用给定密钥字符串解密string,返回指定编码方式明文
            /// </summary>
            /// <param name="encrypted">密文</param>
            /// <param name="key">密钥</param>
            /// <param name="encoding">字符编码方案</param>
            /// <returns>明文</returns>
            public static string Decrypt(this string encrypted, string key, Encoding encoding)
            {
                byte[] buff = Convert.FromBase64String(encrypted);
                byte[] kb = System.Text.Encoding.Default.GetBytes(key);
                return encoding.GetString(Decrypt(buff, kb));
            }
            #endregion

            #region 使用 缺省密钥字符串 加密/解密/byte[]
            /// <summary>
            /// 使用缺省密钥字符串解密byte[]
            /// </summary>
            /// <param name="encrypted">密文</param>
            /// <param name="key">密钥</param>
            /// <returns>明文</returns>
            public static byte[] Decrypt(byte[] encrypted)
            {
                byte[] key = System.Text.Encoding.Default.GetBytes("YONGJIASOFT");
                return Decrypt(encrypted, key);
            }
            /// <summary>
            /// 使用缺省密钥字符串加密
            /// </summary>
            /// <param name="original">原始数据</param>
            /// <param name="key">密钥</param>
            /// <returns>密文</returns>
            public static byte[] Encrypt(byte[] original)
            {
                byte[] key = System.Text.Encoding.Default.GetBytes("YONGJIASOFT");
                return Encrypt(original, key);
            }
            #endregion

            #region  使用 给定密钥 加密/解密/byte[]

            /// <summary>
            /// 生成MD5摘要
            /// </summary>
            /// <param name="original">数据源</param>
            /// <returns>摘要</returns>
            public static byte[] MakeMD5(byte[] original)
            {
                MD5CryptoServiceProvider hashmd5 = new MD5CryptoServiceProvider();
                byte[] keyhash = hashmd5.ComputeHash(original);
                hashmd5 = null;
                return keyhash;
            }


            /// <summary>
            /// 使用给定密钥加密
            /// </summary>
            /// <param name="original">明文</param>
            /// <param name="key">密钥</param>
            /// <returns>密文</returns>
            public static byte[] Encrypt(byte[] original, byte[] key)
            {
                TripleDESCryptoServiceProvider des = new TripleDESCryptoServiceProvider();
                des.Key = MakeMD5(key);
                des.Mode = CipherMode.ECB;

                return des.CreateEncryptor().TransformFinalBlock(original, 0, original.Length);
            }

            /// <summary>
            /// 使用给定密钥解密数据
            /// </summary>
            /// <param name="encrypted">密文</param>
            /// <param name="key">密钥</param>
            /// <returns>明文</returns>
            public static byte[] Decrypt(byte[] encrypted, byte[] key)
            {
                TripleDESCryptoServiceProvider des = new TripleDESCryptoServiceProvider();
                des.Key = MakeMD5(key);
                des.Mode = CipherMode.ECB;

                return des.CreateDecryptor().TransformFinalBlock(encrypted, 0, encrypted.Length);
            }

            #endregion

            #region 标准MD5


            /// 

            ///方法一:
            ///此种加密之后的字符串是三十二位的(字母加数据)字符串  
            /// Example: password是admin 加密变成后21232f297a57a5a743894a0e4a801fc3
            /// 

            /// 
            /// 
            public static string Md5String(this string beforeStr)
            {
                string afterString = "";
                MD5 md5 = System.Security.Cryptography.MD5.Create();
                byte[] hashs = md5.ComputeHash(Encoding.UTF8.GetBytes(beforeStr));

                foreach (byte by in hashs)
                    //这里是字母加上数据进行加密.//3y 可以,y3不可以或 x3j等应该是超过32位不可以
                    afterString += by.ToString("x2");
                return afterString;

            }




            #endregion
        }